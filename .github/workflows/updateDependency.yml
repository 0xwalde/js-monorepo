name: Publish Library

on:
  workflow_dispatch:
    inputs:
      synthetix_version:
        description: 'Upstream `synthetix` repo version (leave empty if no update)'
        required: false
      monorepo_version:
        description: 'New Monorepo Version (ex. 2.50.0-alpha) (leave empty to "patch")'
        required: false

jobs:
  update_version:
    name: Update synthetix in contracts-interface
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: 'https://registry.npmjs.org'
          cache: 'yarn'

      - run: yarn npm whoami
        env:
          YARN_NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - run: yarn install --immutable

      - name: Config git identity
        run: |
          git config --global user.email "ci@cc.snxdao.io"
          git config --global user.name "Synthetix CI"

      - name: Update to the new synthetix version (if present)
        if: github.event.inputs.synthetix_version
        run: |
          yarn up synthetix@${{ github.event.inputs.synthetix_version }} --exact

          # Synthetix version will bump only affected packages
          for WORKSPACE_PACKAGE in $(git diff --name-only '**/package.json'); do
            WORKSPACE_NAME=$(jq --raw-output '.name' < $WORKSPACE_PACKAGE)
            yarn workspace $WORKSPACE_NAME version --deferred patch
          done

          git commit -am "synthetix@${{ github.event.inputs.synthetix_version }}" --allow-empty --no-verify

      - name: Manual update all packages to the specified monorepo version (if present)
        if: github.event.inputs.monorepo_version
        run: |
          # update all public packages versions
          yarn workspaces foreach --no-private version --deferred "${{ github.event.inputs.monorepo_version }}"
          
          # update monorepo version separately
          yarn version --deferred "${{ github.event.inputs.monorepo_version }}"

      - run: yarn version apply --all

      - run: yarn lint
      - run: yarn build
      - run: yarn test

      - name: Create git tag and commit changes
        run: |
          git diff --name-only '**/package.json' > /tmp/changed-packages.txt
          cat /tmp/changed-packages.txt

          echo -n > /tmp/commit-message.txt
          echo 'Updated packages:' >> /tmp/commit-message.txt
          for WORKSPACE_PACKAGE in $(cat /tmp/changed-packages.txt); do
            WORKSPACE_NAME=$(jq --raw-output '.name' < $WORKSPACE_PACKAGE)
            WORKSPACE_VERSION=$(jq --raw-output '.version' < $WORKSPACE_PACKAGE)
            echo "  - $WORKSPACE_NAME@$WORKSPACE_VERSION" >> /tmp/commit-message.txt
          done
          cat /tmp/commit-message.txt

          git commit --allow-empty --no-verify --all --file /tmp/commit-message.txt 
          
          for WORKSPACE_PACKAGE in $(cat /tmp/changed-packages.txt); do
            WORKSPACE_NAME=$(jq --raw-output '.name' < $WORKSPACE_PACKAGE)
            WORKSPACE_VERSION=$(jq --raw-output '.version' < $WORKSPACE_PACKAGE)
            git tag -a "$WORKSPACE_NAME@$WORKSPACE_VERSION" -m "$WORKSPACE_NAME@$WORKSPACE_VERSION"
          done         

      - name: Publish packages
        run: yarn workspaces foreach --no-private npm publish
        env:
          YARN_NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - run: git push --follow-tags

      - name: Populate env.NEW_VERSION
        run: |
          echo "NOTE: in case of automatic synthetix_version update root workspace will keep the same version"
          export NEW_VERSION="$(jq -r .version < package.json)"
          echo "NEW_VERSION=$NEW_VERSION" 
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV          

      - name: Notify Synthetixio/staking
        run: |
          jq --null-input --compact-output --raw-output '{
            ref: "dev"
          }' > /tmp/staking.json
          jq < /tmp/staking.json

          curl --verbose --header "Authorization: token ${{ secrets.GH_TOKEN_DAPPS }}" --request POST \
            --data @/tmp/staking.json \
            http://localhost:3000
            https://api.github.com/repos/Synthetixio/staking/actions/workflows/updateDependency.yml/dispatches

      - name: Notify Synthetixio/futures-keepers
        run: |
          jq --null-input --compact-output --raw-output '{
            ref: "develop"
          }' > /tmp/futures-keepers.json
          jq < /tmp/futures-keepers.json

          curl --verbose --header "Authorization: token ${{ secrets.GH_TOKEN_DAPPS }}" --request POST \
            --data @/tmp/futures-keepers.json \
            https://api.github.com/repos/Synthetixio/futures-keepers/actions/workflows/updateDependency.yml/dispatches
