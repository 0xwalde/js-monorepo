{"version":3,"file":"use-visual-state.mjs.js","sources":["../../../../../../../../node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs"],"sourcesContent":["import { __rest } from 'tslib';\nimport { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { checkIfControllingVariants, checkIfVariantNode, resolveVariantFromProps } from '../../render/utils/variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\n\nfunction makeState(_a, props, context, presenceContext) {\n    var scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps, createRenderState = _a.createRenderState, onMount = _a.onMount;\n    var state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    if (onMount) {\n        state.mount = function (instance) { return onMount(props, instance, state); };\n    }\n    return state;\n}\nvar makeUseVisualState = function (config) {\n    return function (props, isStatic) {\n        var context = useContext(MotionContext);\n        var presenceContext = useContext(PresenceContext);\n        return isStatic\n            ? makeState(config, props, context, presenceContext)\n            : useConstant(function () {\n                return makeState(config, props, context, presenceContext);\n            });\n    };\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    var values = {};\n    var blockInitialAnimation = (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false;\n    var motionValues = scrapeMotionValues(props);\n    for (var key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    var initial = props.initial, animate = props.animate;\n    var isControllingVariants = checkIfControllingVariants(props);\n    var isVariantNode = checkIfVariantNode(props);\n    if (context &&\n        isVariantNode &&\n        !isControllingVariants &&\n        props.inherit !== false) {\n        initial !== null && initial !== void 0 ? initial : (initial = context.initial);\n        animate !== null && animate !== void 0 ? animate : (animate = context.animate);\n    }\n    var initialAnimationIsBlocked = blockInitialAnimation || initial === false;\n    var variantToSet = initialAnimationIsBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        var list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        list.forEach(function (definition) {\n            var resolved = resolveVariantFromProps(props, definition);\n            if (!resolved)\n                return;\n            var transitionEnd = resolved.transitionEnd; resolved.transition; var target = __rest(resolved, [\"transitionEnd\", \"transition\"]);\n            for (var key in target) {\n                var valueTarget = target[key];\n                if (Array.isArray(valueTarget)) {\n                    /**\n                     * Take final keyframe if the initial animation is blocked because\n                     * we want to initialise at the end of that blocked animation.\n                     */\n                    var index = initialAnimationIsBlocked\n                        ? valueTarget.length - 1\n                        : 0;\n                    valueTarget = valueTarget[index];\n                }\n                if (valueTarget !== null) {\n                    values[key] = valueTarget;\n                }\n            }\n            for (var key in transitionEnd)\n                values[key] = transitionEnd[key];\n        });\n    }\n    return values;\n}\n\nexport { makeUseVisualState };\n"],"names":["makeState","_a","props","context","presenceContext","scrapeMotionValuesFromProps","createRenderState","onMount","state","latestValues","makeLatestValues","renderState","mount","instance","scrapeMotionValues","values","blockInitialAnimation","initial","motionValues","key","resolveMotionValue","animate","isControllingVariants","checkIfControllingVariants","isVariantNode","checkIfVariantNode","inherit","initialAnimationIsBlocked","variantToSet","isAnimationControls","Array","isArray","forEach","definition","resolved","resolveVariantFromProps","transitionEnd","transition","target","__rest","valueTarget","length","config","isStatic","useContext","MotionContext","PresenceContext","useConstant"],"mappings":"qhBASA,SAASA,EAAUC,EAAIC,EAAOC,EAASC,GACnC,IAAIC,EAA8BJ,EAAGI,4BAA6BC,EAAoBL,EAAGK,kBAAmBC,EAAUN,EAAGM,QACrHC,EAAQ,CACRC,aAAcC,EAAiBR,EAAOC,EAASC,EAAiBC,GAChEM,YAAaL,KAKjB,OAHIC,IACAC,EAAMI,MAAQ,SAAUC,GAAY,OAAON,EAAQL,EAAOW,EAAUL,KAEjEA,CACX,CAYA,SAASE,EAAiBR,EAAOC,EAASC,EAAiBU,GACvD,IAAIC,EAAS,CAAA,EACTC,GAAwH,KAA/FZ,aAAyD,EAASA,EAAgBa,SAC3GC,EAAeJ,EAAmBZ,GACtC,IAAK,IAAIiB,KAAOD,EACZH,EAAOI,GAAOC,EAAAA,mBAAmBF,EAAaC,IAElD,IAAIF,EAAUf,EAAMe,QAASI,EAAUnB,EAAMmB,QACzCC,EAAwBC,6BAA2BrB,GACnDsB,EAAgBC,qBAAmBvB,GACnCC,GACAqB,IACCF,IACiB,IAAlBpB,EAAMwB,UACNT,UAAoDA,EAAUd,EAAQc,SACtEI,UAAoDA,EAAUlB,EAAQkB,UAE1E,IAAIM,EAA4BX,IAAqC,IAAZC,EACrDW,EAAeD,EAA4BN,EAAUJ,EACrDW,GACwB,kBAAjBA,IACNC,EAAAA,oBAAoBD,KACVE,MAAMC,QAAQH,GAAgBA,EAAe,CAACA,IACpDI,SAAQ,SAAUC,GACnB,IAAIC,EAAWC,EAAAA,wBAAwBjC,EAAO+B,GAC9C,GAAKC,EAAL,CAEA,IAAIE,EAAgBF,EAASE,cAAeF,EAASG,WAAY,IAAIC,EAASC,EAAMA,OAACL,EAAU,CAAC,gBAAiB,eACjH,IAAK,IAAIf,KAAOmB,EAAQ,CACpB,IAAIE,EAAcF,EAAOnB,GACzB,GAAIW,MAAMC,QAAQS,GAQdA,EAAcA,EAHFb,EACNa,EAAYC,OAAS,EACrB,GAGU,OAAhBD,IACAzB,EAAOI,GAAOqB,EAErB,CACD,IAAK,IAAIrB,KAAOiB,EACZrB,EAAOI,GAAOiB,EAAcjB,EAnBrB,CAoBvB,IAEI,OAAOJ,CACX,4BA5DyB,SAAU2B,GAC/B,OAAO,SAAUxC,EAAOyC,GACpB,IAAIxC,EAAUyC,2BAAWC,EAAAA,eACrBzC,EAAkBwC,2BAAWE,EAAAA,iBACjC,OAAOH,EACD3C,EAAU0C,EAAQxC,EAAOC,EAASC,GAClC2C,EAAAA,aAAY,WACV,OAAO/C,EAAU0C,EAAQxC,EAAOC,EAASC,EACzD,GACA,CACA"}