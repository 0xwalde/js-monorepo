{"version":3,"file":"motion-values.mjs.js","sources":["../../../../../../../../node_modules/framer-motion/dist/es/render/utils/motion-values.mjs"],"sourcesContent":["import { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    var _a;\n    for (var key in next) {\n        var nextValue = next[key];\n        var prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"6.5.1\", \"Attempting to mix Framer Motion versions \".concat(nextValue.version, \" with 6.5.1 may not work as expected.\"));\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping to a new motion value, create a new motion value\n             * from that\n             */\n            element.addValue(key, motionValue(nextValue));\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                var existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                element.addValue(key, motionValue((_a = element.getStaticValue(key)) !== null && _a !== void 0 ? _a : nextValue));\n            }\n        }\n    }\n    // Handle removed values\n    for (var key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n"],"names":["element","next","prev","_a","key","nextValue","prevValue","isMotionValue","addValue","process","env","NODE_ENV","warnOnce","version","concat","motionValue","hasValue","existingValue","getValue","hasAnimated","set","getStaticValue","undefined","removeValue"],"mappings":"kPAIA,SAAqCA,EAASC,EAAMC,GAChD,IAAIC,EACJ,IAAK,IAAIC,KAAOH,EAAM,CAClB,IAAII,EAAYJ,EAAKG,GACjBE,EAAYJ,EAAKE,GACrB,GAAIG,EAAAA,cAAcF,GAKdL,EAAQQ,SAASJ,EAAKC,GAKO,gBAAzBI,QAAQC,IAAIC,UACZC,WAA+B,UAAtBP,EAAUQ,QAAqB,4CAA4CC,OAAOT,EAAUQ,QAAS,+CAGjH,GAAIN,EAAAA,cAAcD,GAKnBN,EAAQQ,SAASJ,EAAKW,EAAAA,YAAYV,SAEjC,GAAIC,IAAcD,EAMnB,GAAIL,EAAQgB,SAASZ,GAAM,CACvB,IAAIa,EAAgBjB,EAAQkB,SAASd,IAEpCa,EAAcE,aAAeF,EAAcG,IAAIf,EACnD,MAEGL,EAAQQ,SAASJ,EAAKW,EAAWA,YAAwC,QAAtCZ,EAAKH,EAAQqB,eAAejB,UAAyB,IAAPD,EAAgBA,EAAKE,GAGjH,CAED,IAAK,IAAID,KAAOF,OACMoB,IAAdrB,EAAKG,IACLJ,EAAQuB,YAAYnB,GAE5B,OAAOH,CACX"}