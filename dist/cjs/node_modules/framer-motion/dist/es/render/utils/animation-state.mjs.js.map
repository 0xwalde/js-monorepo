{"version":3,"file":"animation-state.mjs.js","sources":["../../../../../../../../node_modules/framer-motion/dist/es/render/utils/animation-state.mjs"],"sourcesContent":["import { __spreadArray, __read, __assign, __rest } from 'tslib';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { animateVisualElement } from './animation.mjs';\nimport { AnimationType } from './types.mjs';\nimport { isVariantLabels, resolveVariant, isVariantLabel } from './variants.mjs';\n\nvar variantPriorityOrder = [\n    AnimationType.Animate,\n    AnimationType.InView,\n    AnimationType.Focus,\n    AnimationType.Hover,\n    AnimationType.Tap,\n    AnimationType.Drag,\n    AnimationType.Exit,\n];\nvar reversePriorityOrder = __spreadArray([], __read(variantPriorityOrder), false).reverse();\nvar numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return function (animations) {\n        return Promise.all(animations.map(function (_a) {\n            var animation = _a.animation, options = _a.options;\n            return animateVisualElement(visualElement, animation, options);\n        }));\n    };\n}\nfunction createAnimationState(visualElement) {\n    var animate = animateList(visualElement);\n    var state = createState();\n    var allAnimatedKeys = {};\n    var isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    var buildResolvedTypeValues = function (acc, definition) {\n        var resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            resolved.transition; var transitionEnd = resolved.transitionEnd, target = __rest(resolved, [\"transition\", \"transitionEnd\"]);\n            acc = __assign(__assign(__assign({}, acc), target), transitionEnd);\n        }\n        return acc;\n    };\n    function isAnimated(key) {\n        return allAnimatedKeys[key] !== undefined;\n    }\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        var _a;\n        var props = visualElement.getProps();\n        var context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        var animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        var removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        var encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        var removedVariantIndex = Infinity;\n        var _loop_1 = function (i) {\n            var type = reversePriorityOrder[i];\n            var typeState = state[type];\n            var prop = (_a = props[type]) !== null && _a !== void 0 ? _a : context[type];\n            var propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            var activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = __assign({}, encounteredKeys);\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                return \"continue\";\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            var variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            var shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            var definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            var _b = typeState.prevResolvedValues, prevResolvedValues = _b === void 0 ? {} : _b;\n            var allKeys = __assign(__assign({}, prevResolvedValues), resolvedValues);\n            var markToAnimate = function (key) {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for (var key in allKeys) {\n                var next = resolvedValues[key];\n                var prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */\n                    if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev) || variantDidChange) {\n                            markToAnimate(key);\n                        }\n                        else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */\n                            typeState.protectedKeys[key] = true;\n                        }\n                    }\n                    else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = __assign(__assign({}, encounteredKeys), resolvedValues);\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */\n            if (shouldAnimateType && !isInherited) {\n                animations.push.apply(animations, __spreadArray([], __read(definitionList.map(function (animation) { return ({\n                    animation: animation,\n                    options: __assign({ type: type }, options),\n                }); })), false));\n            }\n        };\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (var i = 0; i < numAnimationTypes; i++) {\n            _loop_1(i);\n        }\n        allAnimatedKeys = __assign({}, encounteredKeys);\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            var fallbackAnimation_1 = {};\n            removedKeys.forEach(function (key) {\n                var fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation_1[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation_1 });\n        }\n        var shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            props.initial === false &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function (child) { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        var animations = animateChanges(options, type);\n        for (var key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        isAnimated: isAnimated,\n        animateChanges: animateChanges,\n        setActive: setActive,\n        setAnimateFunction: setAnimateFunction,\n        getState: function () { return state; },\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (isVariantLabels(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive) {\n    if (isActive === void 0) { isActive = false; }\n    return {\n        isActive: isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    var _a;\n    return _a = {},\n        _a[AnimationType.Animate] = createTypeState(true),\n        _a[AnimationType.InView] = createTypeState(),\n        _a[AnimationType.Hover] = createTypeState(),\n        _a[AnimationType.Tap] = createTypeState(),\n        _a[AnimationType.Drag] = createTypeState(),\n        _a[AnimationType.Focus] = createTypeState(),\n        _a[AnimationType.Exit] = createTypeState(),\n        _a;\n}\n\nexport { checkVariantsDidChange, createAnimationState, variantPriorityOrder };\n"],"names":["variantPriorityOrder","AnimationType","Animate","InView","Focus","Hover","Tap","Drag","Exit","reversePriorityOrder","__spreadArray","__read","reverse","numAnimationTypes","length","checkVariantsDidChange","prev","next","isVariantLabels","shallowCompare","createTypeState","isActive","protectedKeys","needsAnimating","prevResolvedValues","visualElement","_a","animate","animations","Promise","all","map","animation","options","animateVisualElement","animateList","state","allAnimatedKeys","isInitialRender","buildResolvedTypeValues","acc","definition","resolved","resolveVariant","transition","transitionEnd","target","__rest","__assign","animateChanges","changedActiveType","props","getProps","context","getVariantContext","removedKeys","Set","encounteredKeys","removedVariantIndex","Infinity","_loop_1","i","type","typeState","prop","propIsVariant","isVariantLabel","activeDelta","isInherited","manuallyAnimateOnMount","prevProp","isAnimationControls","variantDidChange","shouldAnimateType","definitionList","Array","isArray","resolvedValues","reduce","_b","allKeys","markToAnimate","key","delete","hasOwnProperty","isKeyframesTarget","undefined","add","has","blockInitialAnimation","push","apply","size","fallbackAnimation_1","forEach","fallbackTarget","getBaseTarget","shouldAnimate","Boolean","initial","resolve","isAnimated","setActive","variantChildren","child","animationState","setAnimateFunction","makeAnimator","getState"],"mappings":"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"}