{"version":3,"file":"index.mjs.js","sources":["../../../../../../../../node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs"],"sourcesContent":["import { __read, __spreadArray } from 'tslib';\nimport * as React from 'react';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport { env } from '../../utils/process.mjs';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { useIsMounted } from '../../utils/use-is-mounted.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { useUnmountEffect } from '../../utils/use-unmount-effect.mjs';\n\nvar getChildKey = function (child) { return child.key || \"\"; };\nfunction updateChildLookup(children, allChildren) {\n    children.forEach(function (child) {\n        var key = getChildKey(child);\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    var filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, function (child) {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nvar AnimatePresence = function (_a) {\n    var children = _a.children, custom = _a.custom, _b = _a.initial, initial = _b === void 0 ? true : _b, onExitComplete = _a.onExitComplete, exitBeforeEnter = _a.exitBeforeEnter, _c = _a.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    var _d = __read(useForceUpdate(), 1), forceRender = _d[0];\n    var forceRenderLayoutGroup = useContext(LayoutGroupContext).forceRender;\n    if (forceRenderLayoutGroup)\n        forceRender = forceRenderLayoutGroup;\n    var isMounted = useIsMounted();\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    var filteredChildren = onlyElements(children);\n    var childrenToRender = filteredChildren;\n    var exiting = new Set();\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    var presentChildren = useRef(childrenToRender);\n    // A lookup table to quickly reference components by key\n    var allChildren = useRef(new Map()).current;\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    var isInitialRender = useRef(true);\n    useIsomorphicLayoutEffect(function () {\n        isInitialRender.current = false;\n        updateChildLookup(filteredChildren, allChildren);\n        presentChildren.current = childrenToRender;\n    });\n    useUnmountEffect(function () {\n        isInitialRender.current = true;\n        allChildren.clear();\n        exiting.clear();\n    });\n    if (isInitialRender.current) {\n        return (React.createElement(React.Fragment, null, childrenToRender.map(function (child) { return (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout }, child)); })));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    childrenToRender = __spreadArray([], __read(childrenToRender), false);\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    var presentKeys = presentChildren.current.map(getChildKey);\n    var targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    var numPresent = presentKeys.length;\n    for (var i = 0; i < numPresent; i++) {\n        var key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1) {\n            exiting.add(key);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (exitBeforeEnter && exiting.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exiting.forEach(function (key) {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        var child = allChildren.get(key);\n        if (!child)\n            return;\n        var insertionIndex = presentKeys.indexOf(key);\n        var onExit = function () {\n            allChildren.delete(key);\n            exiting.delete(key);\n            // Remove this child from the present children\n            var removeIndex = presentChildren.current.findIndex(function (presentChild) { return presentChild.key === key; });\n            presentChildren.current.splice(removeIndex, 1);\n            // Defer re-rendering until all exiting children have indeed left\n            if (!exiting.size) {\n                presentChildren.current = filteredChildren;\n                if (isMounted.current === false)\n                    return;\n                forceRender();\n                onExitComplete && onExitComplete();\n            }\n        };\n        childrenToRender.splice(insertionIndex, 0, React.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map(function (child) {\n        var key = child.key;\n        return exiting.has(key) ? (child) : (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    if (env !== \"production\" &&\n        exitBeforeEnter &&\n        childrenToRender.length > 1) {\n        console.warn(\"You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.\");\n    }\n    return (React.createElement(React.Fragment, null, exiting.size\n        ? childrenToRender\n        : childrenToRender.map(function (child) { return cloneElement(child); })));\n};\n\nexport { AnimatePresence };\n"],"names":["getChildKey","child","key","_a","children","custom","_b","initial","onExitComplete","exitBeforeEnter","_c","presenceAffectsLayout","forceRender","__read","useForceUpdate","forceRenderLayoutGroup","useContext","LayoutGroupContext","isMounted","useIsMounted","filteredChildren","filtered","Children","forEach","isValidElement","push","onlyElements","childrenToRender","exiting","Set","presentChildren","useRef","allChildren","react","exports","Map","current","isInitialRender","useIsomorphicLayoutEffect","set","updateChildLookup","useUnmountEffect","clear","React.createElement","React.Fragment","map","createElement","PresenceChild","isPresent","undefined","__spreadArray","presentKeys","targetKeys","numPresent","length","i","indexOf","add","size","get","insertionIndex","splice","delete","removeIndex","findIndex","presentChild","has","env","console","warn","cloneElement"],"mappings":"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"}