{"version":3,"file":"delta-apply.mjs.js","sources":["../../../../../../../../node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs"],"sourcesContent":["import { __read } from 'tslib';\nimport { mix } from 'popmotion';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    var distanceFromOrigin = point - originPoint;\n    var scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate, scale, originPoint, boxScale) {\n    if (translate === void 0) { translate = 0; }\n    if (scale === void 0) { scale = 1; }\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, _a) {\n    var x = _a.x, y = _a.y;\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition) {\n    var _a, _b;\n    if (isSharedTransition === void 0) { isSharedTransition = false; }\n    var treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    var node;\n    var delta;\n    for (var i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        if (((_b = (_a = node.instance) === null || _a === void 0 ? void 0 : _a.style) === null || _b === void 0 ? void 0 : _b.display) === \"contents\")\n            continue;\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, { x: -node.scroll.x, y: -node.scroll.y });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, transforms, _a) {\n    var _b = __read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];\n    var axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    var originPoint = mix(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nvar xKeys = [\"x\", \"scaleX\", \"originX\"];\nvar yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform, xKeys);\n    transformAxis(box.y, transform, yKeys);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n"],"names":["scalePoint","point","scale","originPoint","applyPointDelta","translate","boxScale","undefined","applyAxisDelta","axis","min","max","applyBoxDelta","box","_a","x","y","transformAxis","transforms","_b","__read","key","scaleKey","originKey","axisOrigin","mix","xKeys","yKeys","transformBox","transform","treeScale","treePath","isSharedTransition","treeLength","length","node","delta","i","projectionDelta","instance","style","display","options","layoutScroll","scroll","root","hasTransform","latestValues","distance"],"mappings":"iOAOA,SAASA,EAAWC,EAAOC,EAAOC,GAG9B,OAAOA,EADMD,GADYD,EAAQE,EAGrC,CAIA,SAASC,EAAgBH,EAAOI,EAAWH,EAAOC,EAAaG,GAI3D,YAHiBC,IAAbD,IACAL,EAAQD,EAAWC,EAAOK,EAAUH,IAEjCH,EAAWC,EAAOC,EAAOC,GAAeE,CACnD,CAIA,SAASG,EAAeC,EAAMJ,EAAWH,EAAOC,EAAaG,QACvC,IAAdD,IAAwBA,EAAY,QAC1B,IAAVH,IAAoBA,EAAQ,GAChCO,EAAKC,IAAMN,EAAgBK,EAAKC,IAAKL,EAAWH,EAAOC,EAAaG,GACpEG,EAAKE,IAAMP,EAAgBK,EAAKE,IAAKN,EAAWH,EAAOC,EAAaG,EACxE,CAIA,SAASM,EAAcC,EAAKC,GACxB,IAAIC,EAAID,EAAGC,EAAGC,EAAIF,EAAGE,EACrBR,EAAeK,EAAIE,EAAGA,EAAEV,UAAWU,EAAEb,MAAOa,EAAEZ,aAC9CK,EAAeK,EAAIG,EAAGA,EAAEX,UAAWW,EAAEd,MAAOc,EAAEb,YAClD,CAiDA,SAASc,EAAcR,EAAMS,EAAYJ,GACrC,IAAIK,EAAKC,EAAAA,OAAON,EAAI,GAAIO,EAAMF,EAAG,GAAIG,EAAWH,EAAG,GAAII,EAAYJ,EAAG,GAClEK,OAAuCjB,IAA1BW,EAAWK,GAA2BL,EAAWK,GAAa,GAC3EpB,EAAcsB,EAAAA,IAAIhB,EAAKC,IAAKD,EAAKE,IAAKa,GAE1ChB,EAAeC,EAAMS,EAAWG,GAAMH,EAAWI,GAAWnB,EAAae,EAAWhB,MACxF,CAIA,IAAIwB,EAAQ,CAAC,IAAK,SAAU,WACxBC,EAAQ,CAAC,IAAK,SAAU,WAI5B,SAASC,EAAaf,EAAKgB,GACvBZ,EAAcJ,EAAIE,EAAGc,EAAWH,GAChCT,EAAcJ,EAAIG,EAAGa,EAAWF,EACpC,oGA5DA,SAAyBd,EAAKiB,EAAWC,EAAUC,GAC/C,IAAIlB,EAAIK,OACmB,IAAvBa,IAAiCA,GAAqB,GAC1D,IAAIC,EAAaF,EAASG,OAC1B,GAAKD,EAAL,CAIA,IAAIE,EACAC,EAFJN,EAAUf,EAAIe,EAAUd,EAAI,EAG5B,IAAK,IAAIqB,EAAI,EAAGA,EAAIJ,EAAYI,IAE5BD,GADAD,EAAOJ,EAASM,IACHC,gBACuH,cAAjD,QAA7EnB,EAA8B,QAAxBL,EAAKqB,EAAKI,gBAA6B,IAAPzB,OAAgB,EAASA,EAAG0B,aAA0B,IAAPrB,OAAgB,EAASA,EAAGsB,WAEnHT,GACAG,EAAKO,QAAQC,cACbR,EAAKS,QACLT,IAASA,EAAKU,MACdjB,EAAaf,EAAK,CAAEE,GAAIoB,EAAKS,OAAO7B,EAAGC,GAAImB,EAAKS,OAAO5B,IAEvDoB,IAEAN,EAAUf,GAAKqB,EAAMrB,EAAEb,MACvB4B,EAAUd,GAAKoB,EAAMpB,EAAEd,MAEvBU,EAAcC,EAAKuB,IAEnBJ,GAAsBc,EAAAA,aAAaX,EAAKY,eACxCnB,EAAaf,EAAKsB,EAAKY,cAxBpB,CA2Bf,4FACA,SAAuBtC,EAAMuC,GACzBvC,EAAKC,IAAMD,EAAKC,IAAMsC,EACtBvC,EAAKE,IAAMF,EAAKE,IAAMqC,CAC1B"}