{"version":3,"file":"use-dom-event.mjs.js","sources":["../../../../../../../node_modules/framer-motion/dist/es/events/use-dom-event.mjs"],"sourcesContent":["import { useEffect } from 'react';\n\nfunction addDomEvent(target, eventName, handler, options) {\n    if (options === void 0) { options = { passive: true }; }\n    target.addEventListener(eventName, handler, options);\n    return function () { return target.removeEventListener(eventName, handler); };\n}\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */\nfunction useDomEvent(ref, eventName, handler, options) {\n    useEffect(function () {\n        var element = ref.current;\n        if (handler && element) {\n            return addDomEvent(element, eventName, handler, options);\n        }\n    }, [ref, eventName, handler, options]);\n}\n\nexport { addDomEvent, useDomEvent };\n"],"names":["addDomEvent","target","eventName","handler","options","passive","addEventListener","removeEventListener","ref","useEffect","element","current"],"mappings":"4JAEA,SAASA,EAAYC,EAAQC,EAAWC,EAASC,GAG7C,YAFgB,IAAZA,IAAsBA,EAAU,CAAEC,SAAS,IAC/CJ,EAAOK,iBAAiBJ,EAAWC,EAASC,GACrC,WAAc,OAAOH,EAAOM,oBAAoBL,EAAWC,GACtE,2CAsBA,SAAqBK,EAAKN,EAAWC,EAASC,GAC1CK,EAAAA,MAAAA,QAAAA,WAAU,WACN,IAAIC,EAAUF,EAAIG,QAClB,GAAIR,GAAWO,EACX,OAAOV,EAAYU,EAASR,EAAWC,EAASC,EAEvD,GAAE,CAACI,EAAKN,EAAWC,EAASC,GACjC"}