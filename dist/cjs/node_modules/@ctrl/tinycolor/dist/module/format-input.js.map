{"version":3,"file":"format-input.js","sources":["../../../../../../../node_modules/@ctrl/tinycolor/dist/module/format-input.js"],"sourcesContent":["import { convertHexToDecimal, hslToRgb, hsvToRgb, parseIntFromHex, rgbToRgb } from './conversion';\nimport { names } from './css-color-names';\nimport { boundAlpha, convertToPercentage } from './util';\n/**\n * Given a string or object, convert that input to RGB\n *\n * Possible string inputs:\n * ```\n * \"red\"\n * \"#f00\" or \"f00\"\n * \"#ff0000\" or \"ff0000\"\n * \"#ff000000\" or \"ff000000\"\n * \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n * \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n * \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n * \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n * \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n * \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n * \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n * ```\n */\nexport function inputToRGB(color) {\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n    if (typeof color === 'string') {\n        color = stringInputToObject(color);\n    }\n    if (typeof color === 'object') {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === '%' ? 'prgb' : 'rgb';\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = 'hsv';\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = 'hsl';\n        }\n        if (Object.prototype.hasOwnProperty.call(color, 'a')) {\n            a = color.a;\n        }\n    }\n    a = boundAlpha(a);\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: Math.min(255, Math.max(rgb.r, 0)),\n        g: Math.min(255, Math.max(rgb.g, 0)),\n        b: Math.min(255, Math.max(rgb.b, 0)),\n        a: a,\n    };\n}\n// <http://www.w3.org/TR/css3-values/#integers>\nvar CSS_INTEGER = '[-\\\\+]?\\\\d+%?';\n// <http://www.w3.org/TR/css3-values/#number-value>\nvar CSS_NUMBER = '[-\\\\+]?\\\\d*\\\\.\\\\d+%?';\n// Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\nvar CSS_UNIT = \"(?:\".concat(CSS_NUMBER, \")|(?:\").concat(CSS_INTEGER, \")\");\n// Actual matching.\n// Parentheses and commas are optional, but not required.\n// Whitespace can take the place of commas or opening paren\nvar PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\".concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")\\\\s*\\\\)?\");\nvar PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\".concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")\\\\s*\\\\)?\");\nvar matchers = {\n    CSS_UNIT: new RegExp(CSS_UNIT),\n    rgb: new RegExp('rgb' + PERMISSIVE_MATCH3),\n    rgba: new RegExp('rgba' + PERMISSIVE_MATCH4),\n    hsl: new RegExp('hsl' + PERMISSIVE_MATCH3),\n    hsla: new RegExp('hsla' + PERMISSIVE_MATCH4),\n    hsv: new RegExp('hsv' + PERMISSIVE_MATCH3),\n    hsva: new RegExp('hsva' + PERMISSIVE_MATCH4),\n    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n};\n/**\n * Permissive string parsing.  Take in a number of formats, and output an object\n * based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n */\nexport function stringInputToObject(color) {\n    color = color.trim().toLowerCase();\n    if (color.length === 0) {\n        return false;\n    }\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color === 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: 'name' };\n    }\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match = matchers.rgb.exec(color);\n    if (match) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    match = matchers.rgba.exec(color);\n    if (match) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    match = matchers.hsl.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    match = matchers.hsla.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    match = matchers.hsv.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    match = matchers.hsva.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    match = matchers.hex8.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? 'name' : 'hex8',\n        };\n    }\n    match = matchers.hex6.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? 'name' : 'hex',\n        };\n    }\n    match = matchers.hex4.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1] + match[1]),\n            g: parseIntFromHex(match[2] + match[2]),\n            b: parseIntFromHex(match[3] + match[3]),\n            a: convertHexToDecimal(match[4] + match[4]),\n            format: named ? 'name' : 'hex8',\n        };\n    }\n    match = matchers.hex3.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1] + match[1]),\n            g: parseIntFromHex(match[2] + match[2]),\n            b: parseIntFromHex(match[3] + match[3]),\n            format: named ? 'name' : 'hex',\n        };\n    }\n    return false;\n}\n/**\n * Check to see if it looks like a CSS unit\n * (see `matchers` above for definition).\n */\nexport function isValidCSSUnit(color) {\n    return Boolean(matchers.CSS_UNIT.exec(String(color)));\n}\n"],"names":["CSS_UNIT","concat","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","matchers","RegExp","rgb","rgba","hsl","hsla","hsv","hsva","hex3","hex6","hex4","hex8","stringInputToObject","color","trim","toLowerCase","length","named","names","r","g","b","a","format","match","exec","h","s","l","v","parseIntFromHex","convertHexToDecimal","isValidCSSUnit","Boolean","String","ok","rgbToRgb","substr","convertToPercentage","hsvToRgb","hslToRgb","Object","prototype","hasOwnProperty","call","boundAlpha","Math","min","max"],"mappings":"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"}