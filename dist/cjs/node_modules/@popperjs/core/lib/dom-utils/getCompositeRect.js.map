{"version":3,"file":"getCompositeRect.js","sources":["../../../../../../../node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js"],"sourcesContent":["import getBoundingClientRect from \"./getBoundingClientRect.js\";\nimport getNodeScroll from \"./getNodeScroll.js\";\nimport getNodeName from \"./getNodeName.js\";\nimport { isHTMLElement } from \"./instanceOf.js\";\nimport getWindowScrollBarX from \"./getWindowScrollBarX.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport isScrollParent from \"./isScrollParent.js\";\nimport { round } from \"../utils/math.js\";\n\nfunction isElementScaled(element) {\n  var rect = element.getBoundingClientRect();\n  var scaleX = round(rect.width) / element.offsetWidth || 1;\n  var scaleY = round(rect.height) / element.offsetHeight || 1;\n  return scaleX !== 1 || scaleY !== 1;\n} // Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\n\n\nexport default function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n\n  var isOffsetParentAnElement = isHTMLElement(offsetParent);\n  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);\n  var documentElement = getDocumentElement(offsetParent);\n  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);\n  var scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  var offsets = {\n    x: 0,\n    y: 0\n  };\n\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078\n    isScrollParent(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n\n    if (isHTMLElement(offsetParent)) {\n      offsets = getBoundingClientRect(offsetParent, true);\n      offsets.x += offsetParent.clientLeft;\n      offsets.y += offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}"],"names":["elementOrVirtualElement","offsetParent","isFixed","isOffsetParentAnElement","isHTMLElement","offsetParentIsScaled","element","rect","getBoundingClientRect","scaleX","round","width","offsetWidth","scaleY","height","offsetHeight","isElementScaled","documentElement","getDocumentElement","scroll","scrollLeft","scrollTop","offsets","x","y","getNodeName","isScrollParent","getNodeScroll","clientLeft","clientTop","getWindowScrollBarX","left","top"],"mappings":"6SAkBe,SAA0BA,EAAyBC,EAAcC,QAC9D,IAAZA,IACFA,GAAU,GAGZ,IAAIC,EAA0BC,gBAAcH,GACxCI,EAAuBD,EAAAA,cAAcH,IAf3C,SAAyBK,GACvB,IAAIC,EAAOD,EAAQE,wBACfC,EAASC,EAAAA,MAAMH,EAAKI,OAASL,EAAQM,aAAe,EACpDC,EAASH,EAAAA,MAAMH,EAAKO,QAAUR,EAAQS,cAAgB,EAC1D,OAAkB,IAAXN,GAA2B,IAAXI,CACzB,CAU4DG,CAAgBf,GACtEgB,EAAkBC,EAAmBjB,GACrCM,EAAOC,EAAsBR,EAAyBK,GACtDc,EAAS,CACXC,WAAY,EACZC,UAAW,GAETC,EAAU,CACZC,EAAG,EACHC,EAAG,GAkBL,OAfIrB,IAA4BA,IAA4BD,MACxB,SAA9BuB,EAAYxB,IAChByB,EAAeT,MACbE,EAASQ,EAAc1B,IAGrBG,EAAAA,cAAcH,KAChBqB,EAAUd,EAAsBP,GAAc,IACtCsB,GAAKtB,EAAa2B,WAC1BN,EAAQE,GAAKvB,EAAa4B,WACjBZ,IACTK,EAAQC,EAAIO,EAAoBb,KAI7B,CACLM,EAAGhB,EAAKwB,KAAOZ,EAAOC,WAAaE,EAAQC,EAC3CC,EAAGjB,EAAKyB,IAAMb,EAAOE,UAAYC,EAAQE,EACzCb,MAAOJ,EAAKI,MACZG,OAAQP,EAAKO,OAEjB"}