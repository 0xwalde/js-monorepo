import{__require as e}from"./lib/ReactPropTypesSecret.js";import{__require as r}from"./lib/has.js";var n,o;function t(){if(o)return n;o=1;var t=function(){};if("production"!==process.env.NODE_ENV){var a=e(),i={},s=r();t=function(e){var r="Warning: "+e;"undefined"!=typeof console&&console.error(r);try{throw new Error(r)}catch(e){}}}function c(e,r,n,o,c){if("production"!==process.env.NODE_ENV)for(var f in e)if(s(e,f)){var u;try{if("function"!=typeof e[f]){var p=Error((o||"React class")+": "+n+" type `"+f+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof e[f]+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw p.name="Invariant Violation",p}u=e[f](r,f,o,n,null,a)}catch(e){u=e}if(!u||u instanceof Error||t((o||"React class")+": type specification of "+n+" `"+f+"` is invalid; the type checker function must return `null` or an `Error` but returned a "+typeof u+". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."),u instanceof Error&&!(u.message in i)){i[u.message]=!0;var l=c?c():"";t("Failed "+n+" type: "+u.message+(null!=l?l:""))}}}return c.resetWarningCache=function(){"production"!==process.env.NODE_ENV&&(i={})},n=c}export{t as __require};
//# sourceMappingURL=checkPropTypes.js.map
