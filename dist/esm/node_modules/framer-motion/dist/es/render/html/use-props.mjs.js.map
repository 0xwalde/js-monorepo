{"version":3,"file":"use-props.mjs.js","sources":["../../../../../../../../node_modules/framer-motion/dist/es/render/html/use-props.mjs"],"sourcesContent":["import { __assign } from 'tslib';\nimport { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (var key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues(_a, visualState, isStatic) {\n    var transformTemplate = _a.transformTemplate;\n    return useMemo(function () {\n        var state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);\n        var vars = state.vars, style = state.style;\n        return __assign(__assign({}, vars), style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState, isStatic) {\n    var styleProp = props.style || {};\n    var style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));\n    if (props.transformValues) {\n        style = props.transformValues(style);\n    }\n    return style;\n}\nfunction useHTMLProps(props, visualState, isStatic) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    var htmlProps = {};\n    var style = useStyle(props, visualState, isStatic);\n    if (Boolean(props.drag) && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : \"pan-\".concat(props.drag === \"x\" ? \"y\" : \"x\");\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps, useStyle };\n"],"names":["copyRawValuesOnly","target","source","props","key","isMotionValue","isForcedMotionValue","useStyle","visualState","isStatic","style","Object","assign","_a","transformTemplate","useMemo","exports","state","createHtmlRenderState","buildHTMLStyles","enableHardwareAcceleration","vars","__assign","useInitialMotionValues","transformValues","useHTMLProps","htmlProps","Boolean","drag","dragListener","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction","concat"],"mappings":"ocAOA,SAASA,EAAkBC,EAAQC,EAAQC,GACvC,IAAK,IAAIC,KAAOF,EACPG,EAAcH,EAAOE,KAAUE,EAAoBF,EAAKD,KACzDF,EAAOG,GAAOF,EAAOE,GAGjC,CAUA,SAASG,EAASJ,EAAOK,EAAaC,GAClC,IACIC,EAAQ,CAAA,EASZ,OALAV,EAAkBU,EALFP,EAAMO,OAAS,GAKKP,GACpCQ,OAAOC,OAAOF,EAhBlB,SAAgCG,EAAIL,EAAaC,GAC7C,IAAIK,EAAoBD,EAAGC,kBAC3B,OAAOC,EAAOC,QAAAD,SAAC,WACX,IAAIE,EAAQC,IACZC,EAAgBF,EAAOT,EAAa,CAAEY,4BAA6BX,GAAYK,GAC/E,IAAIO,EAAOJ,EAAMI,KAAMX,EAAQO,EAAMP,MACrC,OAAOY,EAASA,EAAS,CAAA,EAAID,GAAOX,EAC5C,GAAO,CAACF,GACR,CAQyBe,CAAuBpB,EAAOK,EAAaC,IAC5DN,EAAMqB,kBACNd,EAAQP,EAAMqB,gBAAgBd,IAE3BA,CACX,CACA,SAASe,EAAatB,EAAOK,EAAaC,GAEtC,IAAIiB,EAAY,CAAA,EACZhB,EAAQH,EAASJ,EAAOK,EAAaC,GAgBzC,OAfIkB,QAAQxB,EAAMyB,QAAgC,IAAvBzB,EAAM0B,eAE7BH,EAAUI,WAAY,EAEtBpB,EAAMqB,WACFrB,EAAMsB,iBACFtB,EAAMuB,mBACF,OAEZvB,EAAMwB,aACa,IAAf/B,EAAMyB,KACA,OACA,OAAOO,OAAsB,MAAfhC,EAAMyB,KAAe,IAAM,MAEvDF,EAAUhB,MAAQA,EACXgB,CACX"}