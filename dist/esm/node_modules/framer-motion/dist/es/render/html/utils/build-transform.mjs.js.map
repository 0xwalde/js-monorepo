{"version":3,"file":"build-transform.mjs.js","sources":["../../../../../../../../../node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs"],"sourcesContent":["import { sortTransformProps } from './transform.mjs';\n\nvar translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(_a, _b, transformIsDefault, transformTemplate) {\n    var transform = _a.transform, transformKeys = _a.transformKeys;\n    var _c = _b.enableHardwareAcceleration, enableHardwareAcceleration = _c === void 0 ? true : _c, _d = _b.allowTransformNone, allowTransformNone = _d === void 0 ? true : _d;\n    // The transform string we're going to build into.\n    var transformString = \"\";\n    // Transform keys into their default order - this will determine the output order.\n    transformKeys.sort(sortTransformProps);\n    // Track whether the defined transform has a defined z so we don't add a\n    // second to enable hardware acceleration\n    var transformHasZ = false;\n    // Loop over each transform and build them into transformString\n    var numTransformKeys = transformKeys.length;\n    for (var i = 0; i < numTransformKeys; i++) {\n        var key = transformKeys[i];\n        transformString += \"\".concat(translateAlias[key] || key, \"(\").concat(transform[key], \") \");\n        if (key === \"z\")\n            transformHasZ = true;\n    }\n    if (!transformHasZ && enableHardwareAcceleration) {\n        transformString += \"translateZ(0)\";\n    }\n    else {\n        transformString = transformString.trim();\n    }\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (allowTransformNone && transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n/**\n * Build a transformOrigin style. Uses the same defaults as the browser for\n * undefined origins.\n */\nfunction buildTransformOrigin(_a) {\n    var _b = _a.originX, originX = _b === void 0 ? \"50%\" : _b, _c = _a.originY, originY = _c === void 0 ? \"50%\" : _c, _d = _a.originZ, originZ = _d === void 0 ? 0 : _d;\n    return \"\".concat(originX, \" \").concat(originY, \" \").concat(originZ);\n}\n\nexport { buildTransform, buildTransformOrigin };\n"],"names":["translateAlias","x","y","z","transformPerspective","buildTransform","_a","_b","transformIsDefault","transformTemplate","transform","transformKeys","_c","enableHardwareAcceleration","_d","allowTransformNone","transformString","sort","sortTransformProps","transformHasZ","numTransformKeys","length","i","key","concat","trim","buildTransformOrigin","originX","originY","originZ"],"mappings":"wDAEA,IAAIA,EAAiB,CACjBC,EAAG,aACHC,EAAG,aACHC,EAAG,aACHC,qBAAsB,eAQ1B,SAASC,EAAeC,EAAIC,EAAIC,EAAoBC,GAChD,IAAIC,EAAYJ,EAAGI,UAAWC,EAAgBL,EAAGK,cAC7CC,EAAKL,EAAGM,2BAA4BA,OAAoC,IAAPD,GAAuBA,EAAIE,EAAKP,EAAGQ,mBAAoBA,OAA4B,IAAPD,GAAuBA,EAEpKE,EAAkB,GAEtBL,EAAcM,KAAKC,GAMnB,IAHA,IAAIC,GAAgB,EAEhBC,EAAmBT,EAAcU,OAC5BC,EAAI,EAAGA,EAAIF,EAAkBE,IAAK,CACvC,IAAIC,EAAMZ,EAAcW,GACxBN,GAAmB,GAAGQ,OAAOxB,EAAeuB,IAAQA,EAAK,KAAKC,OAAOd,EAAUa,GAAM,MACzE,MAARA,IACAJ,GAAgB,EACvB,CAeD,OAdKA,GAAiBN,EAClBG,GAAmB,gBAGnBA,EAAkBA,EAAgBS,OAIlChB,EACAO,EAAkBP,EAAkBC,EAAWF,EAAqB,GAAKQ,GAEpED,GAAsBP,IAC3BQ,EAAkB,QAEfA,CACX,CAKA,SAASU,EAAqBpB,GAC1B,IAAIC,EAAKD,EAAGqB,QAASA,OAAiB,IAAPpB,EAAgB,MAAQA,EAAIK,EAAKN,EAAGsB,QAASA,OAAiB,IAAPhB,EAAgB,MAAQA,EAAIE,EAAKR,EAAGuB,QAASA,OAAiB,IAAPf,EAAgB,EAAIA,EACjK,MAAO,GAAGU,OAAOG,EAAS,KAAKH,OAAOI,EAAS,KAAKJ,OAAOK,EAC/D"}