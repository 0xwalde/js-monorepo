{"version":3,"file":"filter-props.mjs.js","sources":["../../../../../../../../../node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs"],"sourcesContent":["import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nvar shouldForward = function (key) { return !isValidMotionProp(key); };\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp)\n        return;\n    // Explicitly filter our events\n    shouldForward = function (key) {\n        return key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n    };\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch (_a) {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    var filteredProps = {};\n    for (var key in props) {\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] && key.startsWith(\"onDrag\"))) {\n            filteredProps[key] = props[key];\n        }\n    }\n    return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };\n"],"names":["shouldForward","key","isValidMotionProp","loadExternalIsValidProp","isValidProp","startsWith","require","default","_a","filterProps","props","isDom","forwardMotionProps","filteredProps"],"mappings":"4EAEA,IAAIA,EAAgB,SAAUC,GAAO,OAAQC,EAAkBD,IAC/D,SAASE,EAAwBC,GACxBA,IAGLJ,EAAgB,SAAUC,GACtB,OAAOA,EAAII,WAAW,OAASH,EAAkBD,GAAOG,EAAYH,EAC5E,EACA,CAcA,IAMIE,EAAwBG,QAAQ,0BAA0BC,QAI9D,CAFA,MAAOC,GAEP,CACA,SAASC,EAAYC,EAAOC,EAAOC,GAC/B,IAAIC,EAAgB,CAAA,EACpB,IAAK,IAAIZ,KAAOS,GACRV,EAAcC,KACU,IAAvBW,GAA+BV,EAAkBD,KAChDU,IAAUT,EAAkBD,IAE7BS,EAAiB,WAAKT,EAAII,WAAW,aACtCQ,EAAcZ,GAAOS,EAAMT,IAGnC,OAAOY,CACX"}