{"version":3,"file":"transform.mjs.js","sources":["../../../../../../../../node_modules/framer-motion/dist/es/projection/styles/transform.mjs"],"sourcesContent":["var identityProjection = \"translate3d(0px, 0px, 0) scale(1, 1) scale(1, 1)\";\nfunction buildProjectionTransform(delta, treeScale, latestTransform) {\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    var xTranslate = delta.x.translate / treeScale.x;\n    var yTranslate = delta.y.translate / treeScale.y;\n    var transform = \"translate3d(\".concat(xTranslate, \"px, \").concat(yTranslate, \"px, 0) \");\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    transform += \"scale(\".concat(1 / treeScale.x, \", \").concat(1 / treeScale.y, \") \");\n    if (latestTransform) {\n        var rotate = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;\n        if (rotate)\n            transform += \"rotate(\".concat(rotate, \"deg) \");\n        if (rotateX)\n            transform += \"rotateX(\".concat(rotateX, \"deg) \");\n        if (rotateY)\n            transform += \"rotateY(\".concat(rotateY, \"deg) \");\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    var elementScaleX = delta.x.scale * treeScale.x;\n    var elementScaleY = delta.y.scale * treeScale.y;\n    transform += \"scale(\".concat(elementScaleX, \", \").concat(elementScaleY, \")\");\n    return transform === identityProjection ? \"none\" : transform;\n}\n\nexport { buildProjectionTransform, identityProjection };\n"],"names":["identityProjection","buildProjectionTransform","delta","treeScale","latestTransform","xTranslate","x","translate","yTranslate","y","transform","concat","rotate","rotateX","rotateY","elementScaleX","scale","elementScaleY"],"mappings":"AAAG,IAACA,EAAqB,mDACzB,SAASC,EAAyBC,EAAOC,EAAWC,GAOhD,IAAIC,EAAaH,EAAMI,EAAEC,UAAYJ,EAAUG,EAC3CE,EAAaN,EAAMO,EAAEF,UAAYJ,EAAUM,EAC3CC,EAAY,eAAeC,OAAON,EAAY,QAAQM,OAAOH,EAAY,WAM7E,GADAE,GAAa,SAASC,OAAO,EAAIR,EAAUG,EAAG,MAAMK,OAAO,EAAIR,EAAUM,EAAG,MACxEL,EAAiB,CACjB,IAAIQ,EAASR,EAAgBQ,OAAQC,EAAUT,EAAgBS,QAASC,EAAUV,EAAgBU,QAC9FF,IACAF,GAAa,UAAUC,OAAOC,EAAQ,UACtCC,IACAH,GAAa,WAAWC,OAAOE,EAAS,UACxCC,IACAJ,GAAa,WAAWC,OAAOG,EAAS,SAC/C,CAKD,IAAIC,EAAgBb,EAAMI,EAAEU,MAAQb,EAAUG,EAC1CW,EAAgBf,EAAMO,EAAEO,MAAQb,EAAUM,EAE9C,MAhCqB,sDA+BrBC,GAAa,SAASC,OAAOI,EAAe,MAAMJ,OAAOM,EAAe,MAC9B,OAASP,CACvD"}