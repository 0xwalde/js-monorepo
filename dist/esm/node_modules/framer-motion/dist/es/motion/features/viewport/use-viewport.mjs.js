import{env as e}from"../../../utils/process.mjs.js";import"../../../../../../react/index.js";import{AnimationType as n}from"../../../render/utils/types.mjs.js";import{warnOnce as t}from"../../../utils/warn-once.mjs.js";import{observeIntersection as r}from"./observers.mjs.js";import{r as i}from"../../../../../../../_virtual/index.js";function o(e){var n=e.visualElement,t=e.whileInView,r=e.onViewportEnter,o=e.onViewportLeave,s=e.viewport,l=void 0===s?{}:s,m=i.exports.useRef({hasEnteredView:!1,isInView:!1}),v=Boolean(t||r||o);l.once&&m.current.hasEnteredView&&(v=!1),("undefined"==typeof IntersectionObserver?u:a)(v,m.current,n,l)}var s={some:0,all:1};function a(e,t,o,a){var u=a.root,l=a.margin,m=a.amount,v=void 0===m?"some":m,c=a.once;i.exports.useEffect((function(){if(e){var i={root:null==u?void 0:u.current,rootMargin:l,threshold:"number"==typeof v?v:s[v]};return r(o.getInstance(),i,(function(e){var r,i=e.isIntersecting;if(t.isInView!==i&&(t.isInView=i,!c||i||!t.hasEnteredView)){i&&(t.hasEnteredView=!0),null===(r=o.animationState)||void 0===r||r.setActive(n.InView,i);var s=o.getProps(),a=i?s.onViewportEnter:s.onViewportLeave;null==a||a(e)}}))}}),[e,u,l,v])}function u(r,o,s,a){var u=a.fallback,l=void 0===u||u;i.exports.useEffect((function(){r&&l&&("production"!==e&&t(!1,"IntersectionObserver not available on this device. whileInView animations will trigger on mount."),requestAnimationFrame((function(){var e;o.hasEnteredView=!0;var t=s.getProps().onViewportEnter;null==t||t(null),null===(e=s.animationState)||void 0===e||e.setActive(n.InView,!0)})))}),[r])}export{o as useViewport};
//# sourceMappingURL=use-viewport.mjs.js.map
