{"version":3,"file":"index.mjs.js","sources":["../../../../../../../node_modules/framer-motion/dist/es/value/index.mjs"],"sourcesContent":["import sync, { getFrameData } from 'framesync';\nimport { velocityPerSecond } from 'popmotion';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\n\nvar isFloat = function (value) {\n    return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nvar MotionValue = /** @class */ (function () {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    function MotionValue(init) {\n        var _this = this;\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"6.5.1\";\n        /**\n         * Duration, in milliseconds, since last updating frame.\n         *\n         * @internal\n         */\n        this.timeDelta = 0;\n        /**\n         * Timestamp of the last time this `MotionValue` was updated.\n         *\n         * @internal\n         */\n        this.lastUpdated = 0;\n        /**\n         * Functions to notify when the `MotionValue` updates.\n         *\n         * @internal\n         */\n        this.updateSubscribers = new SubscriptionManager();\n        /**\n         * Functions to notify when the velocity updates.\n         *\n         * @internal\n         */\n        this.velocityUpdateSubscribers = new SubscriptionManager();\n        /**\n         * Functions to notify when the `MotionValue` updates and `render` is set to `true`.\n         *\n         * @internal\n         */\n        this.renderSubscribers = new SubscriptionManager();\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = false;\n        this.updateAndNotify = function (v, render) {\n            if (render === void 0) { render = true; }\n            _this.prev = _this.current;\n            _this.current = v;\n            // Update timestamp\n            var _a = getFrameData(), delta = _a.delta, timestamp = _a.timestamp;\n            if (_this.lastUpdated !== timestamp) {\n                _this.timeDelta = delta;\n                _this.lastUpdated = timestamp;\n                sync.postRender(_this.scheduleVelocityCheck);\n            }\n            // Update update subscribers\n            if (_this.prev !== _this.current) {\n                _this.updateSubscribers.notify(_this.current);\n            }\n            // Update velocity subscribers\n            if (_this.velocityUpdateSubscribers.getSize()) {\n                _this.velocityUpdateSubscribers.notify(_this.getVelocity());\n            }\n            // Update render subscribers\n            if (render) {\n                _this.renderSubscribers.notify(_this.current);\n            }\n        };\n        /**\n         * Schedule a velocity check for the next frame.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.scheduleVelocityCheck = function () { return sync.postRender(_this.velocityCheck); };\n        /**\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\n         * This ensures velocity calculations return `0`.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.velocityCheck = function (_a) {\n            var timestamp = _a.timestamp;\n            if (timestamp !== _this.lastUpdated) {\n                _this.prev = _this.current;\n                _this.velocityUpdateSubscribers.notify(_this.getVelocity());\n            }\n        };\n        this.hasAnimated = false;\n        this.prev = this.current = init;\n        this.canTrackVelocity = isFloat(this.current);\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.onChange(updateOpacity)\n     *     const unsubscribeY = y.onChange(updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @privateRemarks\n     *\n     * We could look into a `useOnChange` hook if the above lifecycle management proves confusing.\n     *\n     * ```jsx\n     * useOnChange(x, () => {})\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @public\n     */\n    MotionValue.prototype.onChange = function (subscription) {\n        return this.updateSubscribers.add(subscription);\n    };\n    MotionValue.prototype.clearListeners = function () {\n        this.updateSubscribers.clear();\n    };\n    /**\n     * Adds a function that will be notified when the `MotionValue` requests a render.\n     *\n     * @param subscriber - A function that's provided the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @internal\n     */\n    MotionValue.prototype.onRenderRequest = function (subscription) {\n        // Render immediately\n        subscription(this.get());\n        return this.renderSubscribers.add(subscription);\n    };\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    MotionValue.prototype.attach = function (passiveEffect) {\n        this.passiveEffect = passiveEffect;\n    };\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    MotionValue.prototype.set = function (v, render) {\n        if (render === void 0) { render = true; }\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    };\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    MotionValue.prototype.get = function () {\n        return this.current;\n    };\n    /**\n     * @public\n     */\n    MotionValue.prototype.getPrevious = function () {\n        return this.prev;\n    };\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    MotionValue.prototype.getVelocity = function () {\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n        return this.canTrackVelocity\n            ? // These casts could be avoided if parseFloat would be typed better\n                velocityPerSecond(parseFloat(this.current) -\n                    parseFloat(this.prev), this.timeDelta)\n            : 0;\n    };\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    MotionValue.prototype.start = function (animation) {\n        var _this = this;\n        this.stop();\n        return new Promise(function (resolve) {\n            _this.hasAnimated = true;\n            _this.stopAnimation = animation(resolve);\n        }).then(function () { return _this.clearAnimation(); });\n    };\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    MotionValue.prototype.stop = function () {\n        if (this.stopAnimation)\n            this.stopAnimation();\n        this.clearAnimation();\n    };\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    MotionValue.prototype.isAnimating = function () {\n        return !!this.stopAnimation;\n    };\n    MotionValue.prototype.clearAnimation = function () {\n        this.stopAnimation = null;\n    };\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    MotionValue.prototype.destroy = function () {\n        this.updateSubscribers.clear();\n        this.renderSubscribers.clear();\n        this.stop();\n    };\n    return MotionValue;\n}());\nfunction motionValue(init) {\n    return new MotionValue(init);\n}\n\nexport { MotionValue, motionValue };\n"],"names":["MotionValue","init","value","_this","this","version","timeDelta","lastUpdated","updateSubscribers","SubscriptionManager","velocityUpdateSubscribers","renderSubscribers","canTrackVelocity","updateAndNotify","v","render","prev","current","_a","getFrameData","delta","timestamp","sync","postRender","scheduleVelocityCheck","notify","getSize","getVelocity","velocityCheck","hasAnimated","isNaN","parseFloat","prototype","onChange","subscription","add","clearListeners","clear","onRenderRequest","get","attach","passiveEffect","set","getPrevious","velocityPerSecond","start","animation","stop","Promise","resolve","stopAnimation","then","clearAnimation","isAnimating","destroy","motionValue"],"mappings":"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"}