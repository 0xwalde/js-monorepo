{"version":3,"file":"detectOverflow.js","sources":["../../../../../../../node_modules/@popperjs/core/lib/utils/detectOverflow.js"],"sourcesContent":["import getClippingRect from \"../dom-utils/getClippingRect.js\";\nimport getDocumentElement from \"../dom-utils/getDocumentElement.js\";\nimport getBoundingClientRect from \"../dom-utils/getBoundingClientRect.js\";\nimport computeOffsets from \"./computeOffsets.js\";\nimport rectToClientRect from \"./rectToClientRect.js\";\nimport { clippingParents, reference, popper, bottom, top, right, basePlacements, viewport } from \"../enums.js\";\nimport { isElement } from \"../dom-utils/instanceOf.js\";\nimport mergePaddingObject from \"./mergePaddingObject.js\";\nimport expandToHashMap from \"./expandToHashMap.js\"; // eslint-disable-next-line import/no-unused-modules\n\nexport default function detectOverflow(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$placement = _options.placement,\n      placement = _options$placement === void 0 ? state.placement : _options$placement,\n      _options$boundary = _options.boundary,\n      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,\n      _options$rootBoundary = _options.rootBoundary,\n      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,\n      _options$elementConte = _options.elementContext,\n      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,\n      _options$altBoundary = _options.altBoundary,\n      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,\n      _options$padding = _options.padding,\n      padding = _options$padding === void 0 ? 0 : _options$padding;\n  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n  var altContext = elementContext === popper ? reference : popper;\n  var popperRect = state.rects.popper;\n  var element = state.elements[altBoundary ? altContext : elementContext];\n  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);\n  var referenceClientRect = getBoundingClientRect(state.elements.reference);\n  var popperOffsets = computeOffsets({\n    reference: referenceClientRect,\n    element: popperRect,\n    strategy: 'absolute',\n    placement: placement\n  });\n  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));\n  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect\n  // 0 or negative = within the clipping rect\n\n  var overflowOffsets = {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element\n\n  if (elementContext === popper && offsetData) {\n    var offset = offsetData[placement];\n    Object.keys(overflowOffsets).forEach(function (key) {\n      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;\n      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';\n      overflowOffsets[key] += offset[axis] * multiply;\n    });\n  }\n\n  return overflowOffsets;\n}"],"names":["detectOverflow","state","options","_options","_options$placement","placement","_options$boundary","boundary","clippingParents","_options$rootBoundary","rootBoundary","viewport","_options$elementConte","elementContext","popper","_options$altBoundary","altBoundary","_options$padding","padding","paddingObject","mergePaddingObject","expandToHashMap","basePlacements","altContext","reference","popperRect","rects","element","elements","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","referenceClientRect","getBoundingClientRect","popperOffsets","computeOffsets","strategy","popperClientRect","rectToClientRect","Object","assign","elementClientRect","overflowOffsets","top","bottom","left","right","offsetData","modifiersData","offset","keys","forEach","key","multiply","indexOf","axis"],"mappings":"2eAUe,SAASA,EAAeC,EAAOC,QAC5B,IAAZA,IACFA,EAAU,CAAA,GAGZ,IAAIC,EAAWD,EACXE,EAAqBD,EAASE,UAC9BA,OAAmC,IAAvBD,EAAgCH,EAAMI,UAAYD,EAC9DE,EAAoBH,EAASI,SAC7BA,OAAiC,IAAtBD,EAA+BE,EAAkBF,EAC5DG,EAAwBN,EAASO,aACjCA,OAAyC,IAA1BD,EAAmCE,EAAWF,EAC7DG,EAAwBT,EAASU,eACjCA,OAA2C,IAA1BD,EAAmCE,EAASF,EAC7DG,EAAuBZ,EAASa,YAChCA,OAAuC,IAAzBD,GAA0CA,EACxDE,EAAmBd,EAASe,QAC5BA,OAA+B,IAArBD,EAA8B,EAAIA,EAC5CE,EAAgBC,EAAsC,iBAAZF,EAAuBA,EAAUG,EAAgBH,EAASI,IACpGC,EAAaV,IAAmBC,EAASU,EAAYV,EACrDW,EAAaxB,EAAMyB,MAAMZ,OACzBa,EAAU1B,EAAM2B,SAASZ,EAAcO,EAAaV,GACpDgB,EAAqBC,EAAgBC,EAAUJ,GAAWA,EAAUA,EAAQK,gBAAkBC,EAAmBhC,EAAM2B,SAASd,QAASP,EAAUG,GACnJwB,EAAsBC,EAAsBlC,EAAM2B,SAASJ,WAC3DY,EAAgBC,EAAe,CACjCb,UAAWU,EACXP,QAASF,EACTa,SAAU,WACVjC,UAAWA,IAETkC,EAAmBC,EAAiBC,OAAOC,OAAO,CAAA,EAAIjB,EAAYW,IAClEO,EAAoB9B,IAAmBC,EAASyB,EAAmBL,EAGnEU,EAAkB,CACpBC,IAAKhB,EAAmBgB,IAAMF,EAAkBE,IAAM1B,EAAc0B,IACpEC,OAAQH,EAAkBG,OAASjB,EAAmBiB,OAAS3B,EAAc2B,OAC7EC,KAAMlB,EAAmBkB,KAAOJ,EAAkBI,KAAO5B,EAAc4B,KACvEC,MAAOL,EAAkBK,MAAQnB,EAAmBmB,MAAQ7B,EAAc6B,OAExEC,EAAahD,EAAMiD,cAAcC,OAErC,GAAItC,IAAmBC,GAAUmC,EAAY,CAC3C,IAAIE,EAASF,EAAW5C,GACxBoC,OAAOW,KAAKR,GAAiBS,SAAQ,SAAUC,GAC7C,IAAIC,EAAW,CAACP,EAAOF,GAAQU,QAAQF,IAAQ,EAAI,GAAK,EACpDG,EAAO,CAACZ,EAAKC,GAAQU,QAAQF,IAAQ,EAAI,IAAM,IACnDV,EAAgBU,IAAQH,EAAOM,GAAQF,CAC7C,GACG,CAED,OAAOX,CACT"}