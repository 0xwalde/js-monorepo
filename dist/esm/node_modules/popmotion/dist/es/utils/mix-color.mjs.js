import{mix as s}from"./mix.mjs.js";import{invariant as t}from"../../../../hey-listen/dist/hey-listen.es.js";import{hslaToRgba as e}from"./hsla-to-rgba.mjs.js";import{hsla as o}from"../../../../style-value-types/dist/es/color/hsla.mjs.js";import{rgba as r}from"../../../../style-value-types/dist/es/color/rgba.mjs.js";import{hex as a}from"../../../../style-value-types/dist/es/color/hex.mjs.js";const l=(s,t,e)=>{const o=s*s,r=t*t;return Math.sqrt(Math.max(0,e*(r-o)+o))},m=[a,r,o],i=s=>m.find((t=>t.test(s))),n=s=>`'${s}' is not an animatable color. Use the equivalent color code instead.`,p=(a,m)=>{let p=i(a),h=i(m);t(!!p,n(a)),t(!!h,n(m));let j=p.parse(a),c=h.parse(m);p===o&&(j=e(j),p=r),h===o&&(c=e(c),h=r);const f=Object.assign({},j);return t=>{for(const s in f)"alpha"!==s&&(f[s]=l(j[s],c[s],t));return f.alpha=s(j.alpha,c.alpha,t),p.transform(f)}};export{p as mixColor,l as mixLinearColor};
//# sourceMappingURL=mix-color.mjs.js.map
