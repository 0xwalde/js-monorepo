import{mix as t}from"./mix.mjs.js";import{mixColor as e}from"./mix-color.mjs.js";import{isNum as n}from"./inc.mjs.js";import{pipe as s}from"./pipe.mjs.js";import{warning as r}from"../../../../hey-listen/dist/hey-listen.es.js";import{complex as o}from"../../../../style-value-types/dist/es/complex/index.mjs.js";import{color as m}from"../../../../style-value-types/dist/es/color/index.mjs.js";function i(s,r){return n(s)?e=>t(s,r,e):m.test(s)?e(s,r):c(s,r)}const u=(t,e)=>{const n=[...t],s=n.length,r=t.map(((t,n)=>i(t,e[n])));return t=>{for(let e=0;e<s;e++)n[e]=r[e](t);return n}},a=(t,e)=>{const n=Object.assign(Object.assign({},t),e),s={};for(const r in n)void 0!==t[r]&&void 0!==e[r]&&(s[r]=i(t[r],e[r]));return t=>{for(const e in s)n[e]=s[e](t);return n}};function l(t){const e=o.parse(t),n=e.length;let s=0,r=0,m=0;for(let t=0;t<n;t++)s||"number"==typeof e[t]?s++:void 0!==e[t].hue?m++:r++;return{parsed:e,numNumbers:s,numRGB:r,numHSL:m}}const c=(t,e)=>{const n=o.createTransformer(e),m=l(t),i=l(e);return m.numHSL===i.numHSL&&m.numRGB===i.numRGB&&m.numNumbers>=i.numNumbers?s(u(m.parsed,i.parsed),n):(r(!0,`Complex values '${t}' and '${e}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`),n=>`${n>0?e:t}`)};export{u as mixArray,c as mixComplex,a as mixObject};
//# sourceMappingURL=mix-complex.mjs.js.map
