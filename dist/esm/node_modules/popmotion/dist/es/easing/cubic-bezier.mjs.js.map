{"version":3,"file":"cubic-bezier.mjs.js","sources":["../../../../../../../node_modules/popmotion/dist/es/easing/cubic-bezier.mjs"],"sourcesContent":["import { linear } from './index.mjs';\n\nconst a = (a1, a2) => 1.0 - 3.0 * a2 + 3.0 * a1;\nconst b = (a1, a2) => 3.0 * a2 - 6.0 * a1;\nconst c = (a1) => 3.0 * a1;\nconst calcBezier = (t, a1, a2) => ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;\nconst getSlope = (t, a1, a2) => 3.0 * a(a1, a2) * t * t + 2.0 * b(a1, a2) * t + c(a1);\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 10;\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = aA + (aB - aA) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - aX;\n        if (currentX > 0.0) {\n            aB = currentT;\n        }\n        else {\n            aA = currentT;\n        }\n    } while (Math.abs(currentX) > subdivisionPrecision &&\n        ++i < subdivisionMaxIterations);\n    return currentT;\n}\nconst newtonIterations = 8;\nconst newtonMinSlope = 0.001;\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n    for (let i = 0; i < newtonIterations; ++i) {\n        const currentSlope = getSlope(aGuessT, mX1, mX2);\n        if (currentSlope === 0.0) {\n            return aGuessT;\n        }\n        const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n        aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n}\nconst kSplineTableSize = 11;\nconst kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    if (mX1 === mY1 && mX2 === mY2)\n        return linear;\n    const sampleValues = new Float32Array(kSplineTableSize);\n    for (let i = 0; i < kSplineTableSize; ++i) {\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n    function getTForX(aX) {\n        let intervalStart = 0.0;\n        let currentSample = 1;\n        const lastSample = kSplineTableSize - 1;\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n            intervalStart += kSampleStepSize;\n        }\n        --currentSample;\n        const dist = (aX - sampleValues[currentSample]) /\n            (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        const guessForT = intervalStart + dist * kSampleStepSize;\n        const initialSlope = getSlope(guessForT, mX1, mX2);\n        if (initialSlope >= newtonMinSlope) {\n            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n        }\n        else if (initialSlope === 0.0) {\n            return guessForT;\n        }\n        else {\n            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n        }\n    }\n    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\nexport { cubicBezier };\n"],"names":["a","a1","a2","b","c","calcBezier","t","getSlope","cubicBezier","mX1","mY1","mX2","mY2","linear","sampleValues","Float32Array","i","getTForX","aX","intervalStart","currentSample","kSplineTableSize","guessForT","initialSlope","aGuessT","currentSlope","newtonRaphsonIterate","aA","aB","currentX","currentT","Math","abs","binarySubdivide"],"mappings":"wCAEA,MAAMA,EAAI,CAACC,EAAIC,IAAO,EAAM,EAAMA,EAAK,EAAMD,EACvCE,EAAI,CAACF,EAAIC,IAAO,EAAMA,EAAK,EAAMD,EACjCG,EAAKH,GAAO,EAAMA,EAClBI,EAAa,CAACC,EAAGL,EAAIC,MAASF,EAAEC,EAAIC,GAAMI,EAAIH,EAAEF,EAAIC,IAAOI,EAAIF,EAAEH,IAAOK,EACxEC,EAAW,CAACD,EAAGL,EAAIC,IAAO,EAAMF,EAAEC,EAAIC,GAAMI,EAAIA,EAAI,EAAMH,EAAEF,EAAIC,GAAMI,EAAIF,EAAEH,GAmClF,SAASO,EAAYC,EAAKC,EAAKC,EAAKC,GAChC,GAAIH,IAAQC,GAAOC,IAAQC,EACvB,OAAOC,EACX,MAAMC,EAAe,IAAIC,aALJ,IAMrB,IAAK,IAAIC,EAAI,EAAGA,EANK,KAMmBA,EACpCF,EAAaE,GAAKX,EANF,GAMaW,EAAqBP,EAAKE,GAE3D,SAASM,EAASC,GACd,IAAIC,EAAgB,EAChBC,EAAgB,EAEpB,KADmBC,KACZD,GAAgCN,EAAaM,IAAkBF,IAAME,EACxED,GAbY,KAedC,EACF,MAEME,EAAYH,EAlBF,KAgBFD,EAAKJ,EAAaM,KAC3BN,EAAaM,EAAgB,GAAKN,EAAaM,KAE9CG,EAAehB,EAASe,EAAWb,EAAKE,GAC9C,OAAIY,GAjCW,KACvB,SAA8BL,EAAIM,EAASf,EAAKE,GAC5C,IAAK,IAAIK,EAAI,EAAGA,EAHK,IAGmBA,EAAG,CACvC,MAAMS,EAAelB,EAASiB,EAASf,EAAKE,GAC5C,GAAqB,IAAjBc,EACA,OAAOD,EAGXA,IADiBnB,EAAWmB,EAASf,EAAKE,GAAOO,GAC3BO,CACzB,CACD,OAAOD,CACX,CAuBmBE,CAAqBR,EAAII,EAAWb,EAAKE,GAE1B,IAAjBY,EACED,EAvDnB,SAAyBJ,EAAIS,EAAIC,EAAInB,EAAKE,GACtC,IAAIkB,EACAC,EACAd,EAAI,EACR,GACIc,EAAWH,GAAMC,EAAKD,GAAM,EAC5BE,EAAWxB,EAAWyB,EAAUrB,EAAKE,GAAOO,EACxCW,EAAW,EACXD,EAAKE,EAGLH,EAAKG,QAEJC,KAAKC,IAAIH,GAfO,QAgBnBb,EAfuB,IAgB7B,OAAOc,CACX,CA0CmBG,CAAgBf,EAAIC,EAAeA,EA3B9B,GA2B+DV,EAAKE,EAEvF,CACD,OAAQL,GAAY,IAANA,GAAiB,IAANA,EAAUA,EAAID,EAAWY,EAASX,GAAII,EAAKE,EACxE"}