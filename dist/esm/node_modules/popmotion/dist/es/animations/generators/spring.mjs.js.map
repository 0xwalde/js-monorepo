{"version":3,"file":"spring.mjs.js","sources":["../../../../../../../../node_modules/popmotion/dist/es/animations/generators/spring.mjs"],"sourcesContent":["import { __rest } from 'tslib';\nimport { findSpring, calcAngularFreq } from '../utils/find-spring.mjs';\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = Object.assign({ velocity: 0.0, stiffness: 100, damping: 10, mass: 1.0, isResolvedFromDuration: false }, options);\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = Object.assign(Object.assign(Object.assign({}, springOptions), derived), { velocity: 0.0, mass: 1.0 });\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nfunction spring(_a) {\n    var { from = 0.0, to = 1.0, restSpeed = 2, restDelta } = _a, options = __rest(_a, [\"from\", \"to\", \"restSpeed\", \"restDelta\"]);\n    const state = { done: false, value: from };\n    let { stiffness, damping, mass, velocity, duration, isResolvedFromDuration, } = getSpringOptions(options);\n    let resolveSpring = zero;\n    let resolveVelocity = zero;\n    function createSpring() {\n        const initialVelocity = velocity ? -(velocity / 1000) : 0.0;\n        const initialDelta = to - from;\n        const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n        const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n        if (restDelta === undefined) {\n            restDelta = Math.min(Math.abs(to - from) / 100, 0.4);\n        }\n        if (dampingRatio < 1) {\n            const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n            resolveSpring = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                return (to -\n                    envelope *\n                        (((initialVelocity +\n                            dampingRatio * undampedAngularFreq * initialDelta) /\n                            angularFreq) *\n                            Math.sin(angularFreq * t) +\n                            initialDelta * Math.cos(angularFreq * t)));\n            };\n            resolveVelocity = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                return (dampingRatio *\n                    undampedAngularFreq *\n                    envelope *\n                    ((Math.sin(angularFreq * t) *\n                        (initialVelocity +\n                            dampingRatio *\n                                undampedAngularFreq *\n                                initialDelta)) /\n                        angularFreq +\n                        initialDelta * Math.cos(angularFreq * t)) -\n                    envelope *\n                        (Math.cos(angularFreq * t) *\n                            (initialVelocity +\n                                dampingRatio *\n                                    undampedAngularFreq *\n                                    initialDelta) -\n                            angularFreq *\n                                initialDelta *\n                                Math.sin(angularFreq * t)));\n            };\n        }\n        else if (dampingRatio === 1) {\n            resolveSpring = (t) => to -\n                Math.exp(-undampedAngularFreq * t) *\n                    (initialDelta +\n                        (initialVelocity + undampedAngularFreq * initialDelta) *\n                            t);\n        }\n        else {\n            const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n            resolveSpring = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                const freqForT = Math.min(dampedAngularFreq * t, 300);\n                return (to -\n                    (envelope *\n                        ((initialVelocity +\n                            dampingRatio * undampedAngularFreq * initialDelta) *\n                            Math.sinh(freqForT) +\n                            dampedAngularFreq *\n                                initialDelta *\n                                Math.cosh(freqForT))) /\n                        dampedAngularFreq);\n            };\n        }\n    }\n    createSpring();\n    return {\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                const currentVelocity = resolveVelocity(t) * 1000;\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(to - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? to : current;\n            return state;\n        },\n        flipTarget: () => {\n            velocity = -velocity;\n            [from, to] = [to, from];\n            createSpring();\n        },\n    };\n}\nspring.needsInterpolation = (a, b) => typeof a === \"string\" || typeof b === \"string\";\nconst zero = (_t) => 0;\n\nexport { spring };\n"],"names":["durationKeys","physicsKeys","isSpringType","options","keys","some","key","undefined","spring","_a","from","to","restSpeed","restDelta","__rest","state","done","value","stiffness","damping","mass","velocity","duration","isResolvedFromDuration","springOptions","Object","assign","derived","findSpring","getSpringOptions","resolveSpring","zero","resolveVelocity","createSpring","initialVelocity","initialDelta","dampingRatio","Math","sqrt","undampedAngularFreq","min","abs","angularFreq","calcAngularFreq","t","envelope","exp","sin","cos","dampedAngularFreq","freqForT","sinh","cosh","next","current","currentVelocity","isBelowVelocityThreshold","isBelowDisplacementThreshold","flipTarget","needsInterpolation","a","b","_t"],"mappings":"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"}